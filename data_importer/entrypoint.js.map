{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["entrypoint.ts"],"names":[],"mappings":"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","sourcesContent":["import {Tracer} from \"./dependencies/ts-core/sentry.js\"\nimport {StdinIngester, BuffIngester} from \"./lib/ts-trace-sdk/ingester.js\";\nimport {\n    ActionInstance,\n    ActionStatus, AddFileAtomicAction, AtomicAction, CoreNode,\n    GitFileset, HTTPFileset,\n    ImageFileset, LocalFileset, MergeAction, MkdirAtomicAction, MvAtomicAction, PatchAtomicAction,\n    BuildPipeline, Pipeline, SymlinkAtomicAction,\n    ActionsObject, UserAction\n} from \"./lib/ts-trace-sdk/model.js\";\nimport {stdin} from \"node:process\";\nimport {bool, error, nil} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport {ReadFromIMPL} from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport {Protobuf} from \"codecomet-js/source/utils/protobuf.js\";\nimport { digest as CryptoDigest } from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {readFileSync, writeFileSync} from \"fs\";\nimport {description} from \"codecomet-js/experimental/protoc/github.com/gogo/protobuf/gogoproto/gogo_pb.js\";\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\")\n\n\ntype Meta = {\n    id: string\n    description: string\n    commit: string // \"651a7ef66b7277f7c293dee8aec6e38305b03022\",\n    author: string // \"spacedub\",\n    parent: string // \"c2356d03e4bb824ef898808cf558fc75615beddb\",\n    dirty: bool // true,\n    location: string // \"github.com/codecomet-io/reporter-elastic\",\n}\n\ntype LowLevelBuilderOperation = {\n    operation: Types.Op\n    digest: CryptoDigest.Digest\n    metadata: Types.OpMetadata\n}\n\n\nfunction ingest(buffer: Buffer): [ LowLevelBuilderOperation[], error ] {\n    const [def, err] = ReadFromIMPL(buffer)\n\n    if (err != nil) {\n        return [nil, err]\n    }\n\n    const operations : LowLevelBuilderOperation[] = def.Def.map((dt) => {\n        const digest = CryptoDigest.FromBytes(dt)\n\n        return {\n            digest,\n            operation: <Types.Op>Protobuf.read(\"Op\", dt),\n            metadata: def.Metadata[digest],\n        }\n    })\n\n    return [ operations, nil ]\n}\n\nexport default async function Pantry(buffer: Buffer, trace: Buffer, meta: string): Promise<Pipeline> {\n    await CodeComet.Bootstrap()\n\n    // Spoof in metadata\n    const metadata = <Meta>JSON.parse(meta);\n\n    // Retrieve the data model from protobuf first, chain that into the ingester\n    // Suck up the serialized protobuf, spit out semi-acceptable objects\n    const [ llbOperations, err ] = ingest(buffer);\n\n    const fromProto: { [key in CryptoDigest.Digest ] : CoreNode } = {}\n\n    llbOperations.forEach((llbOperation) => {\n        // console.warn(JSON.stringify(operation.digest, null, 2))\n        if (llbOperation.metadata.caps['source.image']) {\n            fromProto[llbOperation.digest] = <ImageFileset>{\n                source: llbOperation.operation.source.identifier,\n                forceResolve: llbOperation.operation.source.attrs[\"image.resolvemode\"] === \"pull\",\n                architecture: llbOperation.operation.platform.Architecture,\n                variant: llbOperation.operation.platform.Variant,\n                typeHint: \"fileset.image\",\n                name: llbOperation.metadata.description[\"llb.customname\"],\n            }\n        } else if (llbOperation.metadata.caps['source.git']) {\n            fromProto[llbOperation.digest] = <GitFileset>{\n                source: llbOperation.operation.source.identifier,\n                keepDir: llbOperation.operation.source.attrs[\"git.keepgitdir\"] === \"true\",\n                typeHint: \"fileset.git\",\n                name: llbOperation.metadata.description[\"llb.customname\"],\n            }\n        } else if (llbOperation.metadata.caps['source.local']) {\n            // console.warn(\"Local\", llbOperation.digest)\n            // console.warn(JSON.stringify(llbOperation.Op, null, 2))\n            fromProto[llbOperation.digest] = <LocalFileset>{\n                source: llbOperation.operation.source.identifier,\n                excludePattern: JSON.parse(llbOperation.operation.source.attrs[\"local.excludepattern\"] || \"[]\"),\n                includePattern: JSON.parse(llbOperation.operation.source.attrs[\"local.includepattern\"] || \"[]\"),\n                typeHint: \"fileset.local\",\n                name: llbOperation.metadata.description[\"llb.customname\"],\n            }\n        } else if (llbOperation.metadata.caps['source.http']) {\n            // console.warn(JSON.stringify(llbOperation.Op, null, 2))\n            fromProto[llbOperation.digest] = <HTTPFileset>{\n                source: llbOperation.operation.source.identifier,\n                checksum: llbOperation.operation.source.attrs[\"http.checksum\"],\n                filename: llbOperation.operation.source.attrs[\"http.filename\"],\n                typeHint: \"fileset.http\",\n                name: llbOperation.metadata.description[\"llb.customname\"],\n            }\n        } else if (llbOperation.metadata.description && llbOperation.metadata.description[\"codecomet.op\"]) {\n            let descriptor: AtomicAction\n\n            switch (llbOperation.metadata.description[\"codecomet.op\"]) {\n                case \"atomic.mv\":\n                    descriptor = <MvAtomicAction>{}\n                    break\n                case \"atomic.addfile\":\n                    descriptor = <AddFileAtomicAction>{}\n                    break\n                case \"atomic.mkdir\":\n                    descriptor = <MkdirAtomicAction>{}\n                    break\n                case \"atomic.patch\":\n                    descriptor = <PatchAtomicAction>{}\n                    break\n                case \"atomic.symlink\":\n                    descriptor = <SymlinkAtomicAction>{}\n                    break\n                case \"atomic.merge\":\n                    descriptor = <MergeAction>{}\n                    break\n                default:\n                    console.warn(\"Unrecognized atomic action type|\" + llbOperation.metadata.description[\"codecomet.op\"] + \"|\")\n                    descriptor = <AtomicAction>{}\n                    break\n            }\n\n            descriptor.typeHint = llbOperation.metadata.description[\"codecomet.op\"]\n            descriptor.name = llbOperation.metadata.description[\"llb.customname\"]\n\n            fromProto[llbOperation.digest] = descriptor\n        } else {\n            fromProto[llbOperation.digest] = <UserAction>{\n                typeHint: \"user.action\",\n                name: llbOperation.metadata.description\n                    ? llbOperation.metadata.description[\"llb.customname\"]\n                    : \"\",\n            }\n            // console.warn(llbOperation.metadata)\n        }\n    })\n\n    // throw \"lol\"\n    // Suck up stdin for the logs\n    // new StdinIngester(stdin, function(pl: BuildPipeline, tsks: ActionsObject){\n    const buffIngester = new BuffIngester()\n    const buildPipeline : BuildPipeline = buffIngester.ingest(trace)\n//        , function(pl: BuildPipeline, tsks: ActionsObject){\n    // XXX piggyback on metadata\n    buildPipeline.id = metadata.id\n    buildPipeline.description = metadata.description\n    buildPipeline.repository.commit = metadata.commit\n    buildPipeline.repository.author = metadata.author\n    buildPipeline.repository.parent = metadata.parent\n    buildPipeline.repository.dirty = metadata.dirty\n    buildPipeline.repository.location = metadata.location\n\n    // Geez this is shit. @spacedub burn all of this with fire and rewrite the stitching probably (later...)\n    // briznad: @spacedub you're too hard on yourself\n    Object.keys(buildPipeline.actionsObject).forEach(function(digest){\n        const traceObject = buildPipeline.actionsObject[digest]\n\n        let typedObject: CoreNode\n\n        if (!fromProto[digest]) {\n            // This is not good. Bad shit here: https://github.com/moby/buildkit/issues/3693\n            // So, try very-very hard to still retrieve the object, even with a different digest\n            // if (traceObject.name.startsWith(\"[source:local]\")){\n            Object.keys(fromProto).some(function(key){\n                // console.warn(\"Trying \", fromProto[key].name, \"vs\", pipeline.actionsObject[digest].name)\n                if (fromProto[key].name && fromProto[key].name == buildPipeline.actionsObject[digest].name){\n                    typedObject = fromProto[key]\n\n                    return true\n                }\n            })\n            //}\n            if (!typedObject){\n                console.warn(\"Unable to find proto object for vertex\", digest)\n\n                return\n            }\n        } else {\n            typedObject = fromProto[digest]\n        }\n\n        // console.warn(\"still ok\")\n        typedObject.id = traceObject.id\n        typedObject.name = traceObject.name\n        typedObject.cached = traceObject.cached\n        typedObject.error = traceObject.error\n        typedObject.digest = traceObject.digest\n        typedObject.completed = traceObject.completed\n        typedObject.started = traceObject.started\n        typedObject.runtime = traceObject.runtime\n        typedObject.status = traceObject.status\n        typedObject.stdout = traceObject.stdout\n        typedObject.stderr = traceObject.stderr\n        typedObject.parents = traceObject.parents\n\n        buildPipeline.actionsObject[digest] = typedObject\n    })\n\n    // extract actionObject values into an array\n    const actions = Object.values(buildPipeline.actionsObject)\n        .sort((a, b) => a.started - b.started) // sort values chronologically, based on start time\n\n    delete buildPipeline.actionsObject\n\n    return {\n        ...buildPipeline,\n        actions,\n    };\n}\n\n\nasync function run(protoPath: string, tracePath: string, meta: string, destination: string) {\n    // Retrieve the protobuf definition and the trace file from wherever they are (XHR, file)\n    // Here, just lazily readfilesync them\n    let buff = readFileSync(protoPath)\n    let trace = readFileSync(tracePath)\n\n    // Get the pipeline and the tasks from Pantry\n    let pipeline = await Pantry(buff, trace, meta)\n\n    writeFileSync(destination, JSON.stringify(pipeline, null, 2))\n    // console.warn(JSON.stringify(pipeline, null, 2))\n}\n\nrun(\n    process.argv[2],\n    process.argv[3],\n    process.argv[4],\n    process.argv[5]\n)\n"]}