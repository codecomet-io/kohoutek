{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["entrypoint.ts"],"names":[],"mappings":"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","sourcesContent":["import {Tracer} from \"./dependencies/ts-core/sentry.js\"\nimport {StdinIngester, BuffIngester} from \"./lib/ts-trace-sdk/ingester.js\";\nimport {\n    ActionInstance,\n    ActionStatus, AddFileAtomicAction, AtomicAction, CoreNode,\n    FileSet,\n    GitFileSet, HTTPFileSet,\n    ImageFileSet, LocalFileSet, MergeAction, MkdirAtomicAction, MvAtomicAction, PatchAtomicAction,\n    Pipeline, SymlinkAtomicAction,\n    TasksPool, UserAction\n} from \"./lib/ts-trace-sdk/model.js\";\nimport {stdin} from \"node:process\";\nimport {bool, error, nil} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport {ReadFromIMPL} from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport {Protobuf} from \"codecomet-js/source/utils/protobuf.js\";\nimport {digest} from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {readFileSync, writeFileSync} from \"fs\";\nimport {description} from \"codecomet-js/experimental/protoc/github.com/gogo/protobuf/gogoproto/gogo_pb.js\";\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\")\n\ntype Meta = {\n    id: string\n    description: string\n    commit: string // \"651a7ef66b7277f7c293dee8aec6e38305b03022\",\n    author: string // \"spacedub\",\n    parent: string // \"c2356d03e4bb824ef898808cf558fc75615beddb\",\n    dirty: bool // true,\n    location: string // \"github.com/codecomet-io/reporter-elastic\",\n}\n\n\n\ntype llbOp = {\n    Op:         Types.Op\n    Digest:     digest.Digest\n    OpMetadata: Types.OpMetadata\n}\n\nfunction ingest(buff: Buffer): [llbOp[], error] {\n    let [def, err] = ReadFromIMPL(buff)\n    if (err != nil)\n        return [nil, err]\n\n    var ops: llbOp[] = []\n    def.Def.forEach(function(dt) {\n        let op = <Types.Op>Protobuf.read(\"Op\", dt)\n        let dgst = digest.FromBytes(dt)\n        let ent = <llbOp>{\n            Op: op,\n            Digest: dgst,\n            OpMetadata: def.Metadata[dgst]\n        }\n        ops.push(ent)\n    })\n    return [ops, nil]\n}\n\nexport default async function Pantry(buff: Buffer, trace: Buffer, meta: string): Promise<Pipeline> {\n    await CodeComet.Bootstrap()\n\n    // Spoof in metadata\n    let metadata = <Meta>JSON.parse(meta);\n\n    // Retrieve the data model from protobuf first, chain that into the ingester\n    // Suck up the serialized protobuf, spit out semi-acceptable objects\n    let [ops, err] = ingest(buff);\n    let fromProto: {[key: digest.Digest]: CoreNode} = {}\n    ops.forEach(function(op){\n        // console.warn(JSON.stringify(op.Digest, null, 2))\n        if (op.OpMetadata.caps[\"source.image\"] !== undefined) {\n            fromProto[op.Digest] = <ImageFileSet>{\n                source: op.Op.source.identifier,\n                forceResolve: op.Op.source.attrs[\"image.resolvemode\"] === \"pull\",\n                architecture: op.Op.platform.Architecture,\n                variant: op.Op.platform.Variant,\n                typeHint: \"fileset.image\",\n                name: op.OpMetadata.description[\"llb.customname\"],\n            }\n        }else if (op.OpMetadata.caps[\"source.git\"] !== undefined) {\n            fromProto[op.Digest] = <GitFileSet>{\n                source: op.Op.source.identifier,\n                keepDir: op.Op.source.attrs[\"git.keepgitdir\"] === \"true\",\n                typeHint: \"fileset.git\",\n                name: op.OpMetadata.description[\"llb.customname\"],\n            }\n        }else if (op.OpMetadata.caps[\"source.local\"] !== undefined) {\n            // console.warn(\"Local\", op.Digest)\n            // console.warn(JSON.stringify(op.Op, null, 2))\n            fromProto[op.Digest] = <LocalFileSet>{\n                source: op.Op.source.identifier,\n                excludePattern: JSON.parse(op.Op.source.attrs[\"local.excludepattern\"] || \"[]\"),\n                includePattern: JSON.parse(op.Op.source.attrs[\"local.includepattern\"] || \"[]\"),\n                typeHint: \"fileset.local\",\n                name: op.OpMetadata.description[\"llb.customname\"],\n            }\n        }else if (op.OpMetadata.caps[\"source.http\"] !== undefined) {\n            // console.warn(JSON.stringify(op.Op, null, 2))\n            fromProto[op.Digest] = <HTTPFileSet>{\n                source: op.Op.source.identifier,\n                checksum: op.Op.source.attrs[\"http.checksum\"],\n                filename: op.Op.source.attrs[\"http.filename\"],\n                typeHint: \"fileset.http\",\n                name: op.OpMetadata.description[\"llb.customname\"],\n            }\n        }else if (op.OpMetadata.description !== undefined && op.OpMetadata.description[\"codecomet.op\"] !== \"\") {\n            let descriptor: AtomicAction\n            switch (op.OpMetadata.description[\"codecomet.op\"]) {\n                case \"atomic.mv\":\n                    descriptor = <MvAtomicAction>{}\n                    break\n                case \"atomic.addfile\":\n                    descriptor = <AddFileAtomicAction>{}\n                    break\n                case \"atomic.mkdir\":\n                    descriptor = <MkdirAtomicAction>{}\n                    break\n                case \"atomic.patch\":\n                    descriptor = <PatchAtomicAction>{}\n                    break\n                case \"atomic.symlink\":\n                    descriptor = <SymlinkAtomicAction>{}\n                    break\n                case \"atomic.merge\":\n                    descriptor = <MergeAction>{}\n                    break\n                default:\n                    console.warn(\"Unrecognized atomic action type|\" + op.OpMetadata.description[\"codecomet.op\"] + \"|\")\n                    descriptor = <AtomicAction>{}\n                    break\n            }\n            descriptor.typeHint = op.OpMetadata.description[\"codecomet.op\"]\n            descriptor.name = op.OpMetadata.description[\"llb.customname\"]\n            fromProto[op.Digest] = descriptor\n        }else{\n            fromProto[op.Digest] = <UserAction>{\n                typeHint: \"user.action\",\n                name: !!op.OpMetadata.description ? op.OpMetadata.description[\"llb.customname\"] : \"\",\n            }\n            // console.warn(op.OpMetadata)\n        }\n    })\n\n    // throw \"lol\"\n    // Suck up stdin for the logs\n    // new StdinIngester(stdin, function(pl: Pipeline, tsks: TasksPool){\n    let buffIngester = new BuffIngester()\n    let pipeline = buffIngester.ingest(trace)\n//        , function(pl: Pipeline, tsks: TasksPool){\n    // XXX piggyback on metadata\n    pipeline.id = metadata.id\n    pipeline.description = metadata.description\n    pipeline.repository.commit = metadata.commit\n    pipeline.repository.author = metadata.author\n    pipeline.repository.parent = metadata.parent\n    pipeline.repository.dirty = metadata.dirty\n    pipeline.repository.location = metadata.location\n\n    // Geez this is shit. @spacedub burn all of this with fire and rewrite the stitching probably (later...)\n    Object.keys(pipeline.tasksPool).forEach(function(digest){\n        let traceObject = pipeline.tasksPool[digest]\n        let typedObject: CoreNode\n        if (!(digest in fromProto)){\n            // This is not good. Bad shit here: https://github.com/moby/buildkit/issues/3693\n            // So, try very-very hard to still retrieve the object, even with a different digest\n            // if (traceObject.name.startsWith(\"[source:local]\")){\n            Object.keys(fromProto).some(function(key){\n                // console.warn(\"Trying \", fromProto[key].name, \"vs\", pipeline.tasksPool[digest].name)\n                if (!!fromProto[key].name && fromProto[key].name == pipeline.tasksPool[digest].name){\n                    typedObject = fromProto[key]\n                    return true\n                }\n            })\n            //}\n            if (!typedObject){\n                console.warn(\"Unable to find proto object for vertex\", digest)\n                return\n            }\n        }else{\n            typedObject = fromProto[digest]\n        }\n\n        // console.warn(\"still ok\")\n        typedObject.id = traceObject.id\n        typedObject.name = traceObject.name\n        typedObject.cached = traceObject.cached\n        typedObject.error = traceObject.error\n        typedObject.digest = traceObject.digest\n        typedObject.completed = traceObject.completed\n        typedObject.started = traceObject.started\n        typedObject.runtime = traceObject.runtime\n        typedObject.status = traceObject.status\n        typedObject.stdout = traceObject.stdout\n        typedObject.stderr = traceObject.stderr\n        typedObject.parents = traceObject.parents\n\n        pipeline.tasksPool[digest] = typedObject\n    })\n\n            // callback(pipeline, tsks)\n            // console.warn(JSON.stringify(tsks, null, 2))\n            //         ops.forEach(function(op){\n            //             console.warn(op.Digest)\n            //             // OpMetadata\n            //         })\n            // console.warn(JSON.stringify(pipeline, null, 2))\n//        })\n    return pipeline\n}\n\n\nasync function run(protoPath: string, tracePath: string, meta: string, destination: string) {\n    // Retrieve the protobuf definition and the trace file from wherever they are (XHR, file)\n    // Here, just lazily readfilesync them\n    let buff = readFileSync(protoPath)\n    let trace = readFileSync(tracePath)\n\n    // Get the pipeline and the tasks from Pantry\n    let pipeline = await Pantry(buff, trace, meta)\n\n    writeFileSync(destination, JSON.stringify(pipeline, null, 2))\n    // console.warn(JSON.stringify(pipeline, null, 2))\n}\n\nrun(\n    process.argv[2],\n    process.argv[3],\n    process.argv[4],\n    process.argv[5]\n)\n"]}