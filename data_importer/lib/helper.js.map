{"version":3,"file":"helper.js","sourceRoot":"/","sources":["lib/helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,QAAQ,CAAA;AAGvC,MAAM,UAAU,QAAQ,CAAC,OAAiB,EAAE,SAAkB,CAAC;IAC9D,qDAAqD;IACrD,6CAA6C;IAC7C,4DAA4D;IAC5D,MAAM,YAAY,GAAY,mDAAmD,CAAA;IAEjF,MAAM,MAAM,GAAG,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAA;IAEnD,MAAM,EAAE,GAAY,MAAM,EAAE,CAAA;IAE5B,wFAAwF;IACxF,OAAO,OAAO,KAAK,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;QACjD,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAA;AACN,CAAC","sourcesContent":["import { customAlphabet } from 'nanoid'\n\n\nexport function createId(useCase? : 'html', length : number = 6) : string {\n\t//  we use a character set w/out lookalike characters\n\t// e.g. 1, l, I, 0, O, o, u, v, 5, S, s, 2, Z\n\t// https://github.com/CyberAP/nanoid-dictionary#nolookalikes\n\tconst characterSet : string = '346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz'\n\n\tconst nanoid = customAlphabet(characterSet, length)\n\n\tconst id : string = nanoid()\n\n\t// if the use of this function is to create html ids, insure first character is a letter\n\treturn useCase === 'html' && /^[^A-Za-z]/.test(id)\n\t\t? createId(useCase, length)\n\t\t: id\n}\n"]}