{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["data_importer/entrypoint.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,kCAAkC,CAAA;AACvD,OAAO,EAAgB,YAAY,EAAC,MAAM,gCAAgC,CAAC;AAG3E,OAAO,EAAc,GAAG,EAAC,MAAM,+DAA+D,CAAC;AAC/F,OAAO,SAAS,MAAM,uBAAuB,CAAC;AAC9C,OAAO,EAAC,YAAY,EAAC,MAAM,yDAAyD,CAAC;AACrF,OAAO,EAAC,QAAQ,EAAC,MAAM,uCAAuC,CAAC;AAC/D,OAAO,EAAC,MAAM,EAAC,MAAM,4EAA4E,CAAC;AAIlG,cAAc;AACd,IAAI,MAAM,CAAC,4EAA4E,CAAC,CAAA;AAoBxF,SAAS,MAAM,CAAC,IAAY;IACpB,IAAA,KAAa,YAAY,CAAC,IAAI,CAAC,EAA9B,GAAG,QAAA,EAAE,GAAG,QAAsB,CAAA;IACnC,IAAI,GAAG,IAAI,GAAG;QACV,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;IAErB,IAAI,GAAG,GAAY,EAAE,CAAA;IACrB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,UAAS,EAAE;QACvB,IAAI,EAAE,GAAa,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;QAC1C,IAAI,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QAC/B,IAAI,GAAG,GAAU;YACb,EAAE,EAAE,EAAE;YACN,MAAM,EAAE,IAAI;YACZ,UAAU,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;SACjC,CAAA;QACD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACjB,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;AACrB,CAAC;AAED,MAAM,CAAC,OAAO,UAAgB,MAAM,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY;;;;;wBAC1E,qBAAM,SAAS,CAAC,SAAS,EAAE;oBAE3B,oBAAoB;kBAFO;;oBAA3B,SAA2B,CAAA;oBAGvB,QAAQ,GAAe,EAAE,CAAA;oBAC7B,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;oBAIvB,KAAa,MAAM,CAAC,IAAI,CAAC,EAAxB,GAAG,QAAA,EAAE,GAAG,QAAA,CAAiB;oBAI1B,EAAE,GAAG,IAAI,YAAY,EAAE,CAAA;oBACvB,KAAa,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAA5B,EAAE,QAAA,EAAE,IAAI,QAAA,CAAoB;oBACrC,oDAAoD;oBAChD,4BAA4B;oBAC5B,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAA;oBACnB,EAAE,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAA;oBACrC,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAA;oBACtC,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAA;oBACtC,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAA;oBACtC,EAAE,CAAC,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAA;oBACpC,EAAE,CAAC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAA;oBAElC,qBAAqB;oBACrB,8CAA8C;oBAC9C,oCAAoC;oBACpC,sCAAsC;oBACtC,4BAA4B;oBAC5B,aAAa;oBACb,4CAA4C;oBACxD,YAAY;oBACR,sBAAO,CAAC,EAAE,EAAE,IAAI,CAAC,EAAA;;;;CACpB","sourcesContent":["import {Tracer} from \"./dependencies/ts-core/sentry.js\"\nimport {StdinIngester, BuffIngester} from \"./lib/ts-trace-sdk/ingester.js\";\nimport {ActionInstance, ActionStatus, Pipeline, TasksPool} from \"./lib/ts-trace-sdk/model.js\";\nimport {stdin} from \"node:process\";\nimport {bool, error, nil} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport {ReadFromIMPL} from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport {Protobuf} from \"codecomet-js/source/utils/protobuf.js\";\nimport {digest} from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {readFileSync} from \"fs\";\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\")\n\ntype Meta = {\n    id: string\n    description: string\n    commit: string // \"651a7ef66b7277f7c293dee8aec6e38305b03022\",\n    author: string // \"spacedub\",\n    parent: string // \"c2356d03e4bb824ef898808cf558fc75615beddb\",\n    dirty: bool // true,\n    location: string // \"github.com/codecomet-io/reporter-elastic\",\n}\n\n\n\ntype llbOp = {\n    Op:         Types.Op\n    Digest:     digest.Digest\n    OpMetadata: Types.OpMetadata\n}\n\nfunction ingest(buff: Buffer): [llbOp[], error] {\n    let [def, err] = ReadFromIMPL(buff)\n    if (err != nil)\n        return [nil, err]\n\n    var ops: llbOp[] = []\n    def.Def.forEach(function(dt) {\n        let op = <Types.Op>Protobuf.read(\"Op\", dt)\n        let dgst = digest.FromBytes(dt)\n        let ent = <llbOp>{\n            Op: op,\n            Digest: dgst,\n            OpMetadata: def.Metadata[dgst]\n        }\n        ops.push(ent)\n    })\n    return [ops, nil]\n}\n\nexport default async function Pantry(buff: Buffer, trace: Buffer, meta: string): Promise<[Pipeline, TasksPool]> {\n    await CodeComet.Bootstrap()\n\n    // Spoof in metadata\n    let metadata: Meta = <Meta>{}\n    metadata = JSON.parse(meta)\n\n    // Retrieve the data model from protobuf first, chain that into the ingester\n    // Suck up the serialized protobuf, spit out semi-acceptable objects\n    let [ops, err] = ingest(buff);\n\n    // Suck up stdin for the logs\n    // new StdinIngester(stdin, function(pl: Pipeline, tsks: TasksPool){\n    let bi = new BuffIngester()\n    let [pl, tsks] = bi.ingest(trace)\n//        , function(pl: Pipeline, tsks: TasksPool){\n    // XXX piggyback on metadata\n    pl.id = metadata.id\n    pl.description = metadata.description\n    pl.repository.commit = metadata.commit\n    pl.repository.author = metadata.author\n    pl.repository.parent = metadata.parent\n    pl.repository.dirty = metadata.dirty\n    pl.repository.location = metadata.location\n\n            // callback(pl, tsks)\n            // console.warn(JSON.stringify(tsks, null, 2))\n            //         ops.forEach(function(op){\n            //             console.warn(op.Digest)\n            //             // OpMetadata\n            //         })\n            // console.warn(JSON.stringify(pl, null, 2))\n//        })\n    return [pl, tsks]\n}\n\n"]}