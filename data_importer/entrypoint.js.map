{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["entrypoint.ts"],"names":[],"mappings":"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","sourcesContent":["import {Tracer} from \"./dependencies/ts-core/sentry.js\"\nimport { BuffIngester } from \"./lib/ingester.js\";\nimport {\n    AddFileAction,\n    UtilityAction,\n    FilesetAction,\n    FilesetType,\n    Action,\n    BuildAction,\n    BuildActionsObject,\n    MergeAction,\n    MakeDirectoryAction,\n    MoveAction,\n    PatchAction,\n    ParentAction,\n    BuildPipeline,\n    Pipeline,\n    CreateSymbolicLinkAction,\n    UserAction\n} from \"./lib/model.js\";\nimport {stdin} from \"node:process\";\nimport {bool, error, nil} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport {ReadFromIMPL} from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport {Protobuf} from \"codecomet-js/source/utils/protobuf.js\";\nimport { digest as CryptoDigest } from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {readFileSync, writeFileSync} from \"fs\";\nimport {description} from \"codecomet-js/experimental/protoc/github.com/gogo/protobuf/gogoproto/gogo_pb.js\";\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\")\n\n\ntype Meta = {\n    id: string\n    description: string\n    commit: string // \"651a7ef66b7277f7c293dee8aec6e38305b03022\",\n    author: string // \"spacedub\",\n    parent: string // \"c2356d03e4bb824ef898808cf558fc75615beddb\",\n    dirty: bool // true,\n    location: string // \"github.com/codecomet-io/reporter-elastic\",\n}\n\ntype LowLevelBuilderOperation = {\n    operation: Types.Op\n    digest: CryptoDigest.Digest\n    metadata: Types.OpMetadata\n}\n\n\nconst actionTypeMap = {\n    'atomic.mv' : 'move',\n    'atomic.addfile' : 'addFile',\n    'atomic.mkdir' : 'makeDirectory',\n    'atomic.patch' : 'patch',\n    'atomic.symlink' : 'createSymbolicLink',\n    'atomic.merge' : 'merge',\n};\n\n\nfunction ingest(buffer: Buffer): [ LowLevelBuilderOperation[], error ] {\n    const [def, err] = ReadFromIMPL(buffer)\n\n    if (err != nil) {\n        return [nil, err]\n    }\n\n    const operations : LowLevelBuilderOperation[] = def.Def.map((dt) => {\n        const digest = CryptoDigest.FromBytes(dt)\n\n        return {\n            digest,\n            operation: <Types.Op>Protobuf.read(\"Op\", dt),\n            metadata: def.Metadata[digest],\n        }\n    })\n\n    return [ operations, nil ]\n}\n\nexport default async function Pantry(buffer: Buffer, trace: Buffer, meta: string): Promise<Pipeline> {\n    await CodeComet.Bootstrap()\n\n    // Spoof in metadata\n    const metadata = <Meta>JSON.parse(meta);\n\n    // Retrieve the data model from protobuf first, chain that into the ingester\n    // Suck up the serialized protobuf, spit out semi-acceptable objects\n    const [ llbOperations, err ] = ingest(buffer);\n\n    const buildActionsObject: BuildActionsObject = {}\n\n    const filesetDockerImageUrlRegex : RegExp = /^docker-image:/\n\n    llbOperations.forEach((llbOperation) => {\n        const name : string = llbOperation.metadata.description?.['llb.customname']\n        const actionTypeKey : string = llbOperation?.metadata?.description?.['codecomet.op']\n\n        if (\n            llbOperation.metadata.caps['source.image']\n            || llbOperation.metadata.caps['source.git']\n            || llbOperation.metadata.caps['source.local']\n            || llbOperation.metadata.caps['source.http']\n        ) {\n            let fileset = <FilesetAction>{\n                name,\n                type: 'fileset',\n                filesetType : FilesetType.Scratch,\n                source: llbOperation.operation.source.identifier,\n            }\n\n            if (llbOperation.metadata.caps['source.image']) {\n                fileset = {\n                    ...fileset,\n                    filesetType : FilesetType.Image,\n                    forceResolve: llbOperation.operation.source.attrs['image.resolvemode'] === 'pull',\n                    architecture: llbOperation.operation.platform.Architecture,\n                    variant: llbOperation.operation.platform.Variant,\n                }\n\n                if (filesetDockerImageUrlRegex.test(fileset.source)) {\n                    // By default, just replace the scheme with https for any docker image\n                    let link = fileset.source.replace(filesetDockerImageUrlRegex, 'https:')\n                    let url = new URL(fileset.source)\n                    // If it is a Docker Hub image though, tranform it into http://hub.docker.com/r/OWNER/NAME\n                    // console.warn(url)\n                    if (url.hostname.match(/docker.io$/)){\n                        link = \"https://hub.docker.com/r\" + url.pathname.replace(/:[^:]+$/, \"\")\n                    }\n                    // More special cases may be added in the future if need be (GHCR, ECR, etc)\n                    fileset.link = link\n                }\n            } else if (llbOperation.metadata.caps['source.git']) {\n                fileset = {\n                    ...fileset,\n                    filesetType : FilesetType.Git,\n                    keepDir: llbOperation.operation.source.attrs['git.keepgitdir'] === 'true',\n                    link: fileset.source.replace(/^git:/, 'https:'),\n                }\n            } else if (llbOperation.metadata.caps['source.local']) {\n                fileset = {\n                    ...fileset,\n                    filesetType : FilesetType.Local,\n                    excludePattern: JSON.parse(llbOperation.operation.source.attrs['local.excludepattern'] || '[]'),\n                    includePattern: JSON.parse(llbOperation.operation.source.attrs['local.includepattern'] || '[]'),\n                }\n            } else if (llbOperation.metadata.caps['source.http']) {\n                fileset = {\n                    ...fileset,\n                    filesetType : FilesetType.HTTP,\n                    checksum: llbOperation.operation.source.attrs['http.checksum'],\n                    filename: llbOperation.operation.source.attrs['http.filename'],\n                    link: fileset.source,\n                }\n            }\n\n            buildActionsObject[llbOperation.digest] = fileset\n        } else if (actionTypeKey) {\n            let descriptor: UtilityAction\n\n            switch (actionTypeKey) {\n                case 'atomic.mkdir':\n                    descriptor = <MakeDirectoryAction>{\n                        utilityName: 'make directory',\n                    }\n\n                    break\n                case 'atomic.mv':\n                    descriptor = <MoveAction>{\n                        utilityName: 'move',\n                    }\n\n                    break\n                case 'atomic.addfile':\n                    descriptor = <AddFileAction>{\n                        utilityName: 'add file',\n                    }\n\n                    break\n                case 'atomic.patch':\n                    descriptor = <PatchAction>{\n                        utilityName: 'patch',\n                    }\n\n                    break\n                case 'atomic.symlink':\n                    descriptor = <CreateSymbolicLinkAction>{\n                        utilityName: 'create symbolic link',\n                    }\n\n                    break\n                case 'atomic.merge':\n                    descriptor = <MergeAction>{\n                        utilityName: 'merge',\n                    }\n\n                    break\n                default:\n                    console.warn(`Unrecognized atomic action type|${actionTypeKey }|`)\n\n                    descriptor = <UtilityAction>{}\n                    break\n            }\n\n            descriptor.type = actionTypeMap[ actionTypeKey ] ?? 'utility'\n            descriptor.name = name\n\n            buildActionsObject[llbOperation.digest] = descriptor\n        } else {\n            buildActionsObject[llbOperation.digest] = <UserAction>{\n                type: 'custom',\n                name: name ?? '',\n            }\n        }\n    })\n\n    // throw \"lol\"\n    // Suck up stdin for the logs\n    // new StdinIngester(stdin, function(pl: BuildPipeline, tsks: BuildActionsObject){\n    const buffIngester = new BuffIngester()\n    const buildPipeline : BuildPipeline = buffIngester.ingest(trace)\n//        , function(pl: BuildPipeline, tsks: BuildActionsObject){\n    // XXX piggyback on metadata\n    buildPipeline.id = metadata.id\n    buildPipeline.description = metadata.description\n\n    // disable repository output for now\n    // it leaks info and isn't currently needed\n    // buildPipeline.repository.commit = metadata.commit\n    // buildPipeline.repository.author = metadata.author\n    // buildPipeline.repository.parent = metadata.parent\n    // buildPipeline.repository.dirty = metadata.dirty\n    // buildPipeline.repository.location = metadata.location\n\n    // Geez this is shit. @spacedub burn all of this with fire and rewrite the stitching probably (later...)\n    // briznad: @spacedub you're too hard on yourself\n    Object.keys(buildPipeline.actionsObject).forEach(function(digest){\n        const traceObject = buildPipeline.actionsObject[digest]\n\n        let typedObject: BuildAction\n\n        if (buildActionsObject[digest]) {\n            typedObject = buildActionsObject[digest]\n        } else {\n            // This is not good. Bad shit here: https://github.com/moby/buildkit/issues/3693\n            // So, try very-very hard to still retrieve the object, even with a different digest\n            for (const key of Object.keys(buildActionsObject)) {\n                if (buildActionsObject[key]?.name === buildPipeline.actionsObject[digest]?.name) {\n                    typedObject = buildActionsObject[key]\n\n                    break\n                }\n            }\n\n            if (!typedObject){\n                console.warn(\"Unable to find proto object for vertex\", digest)\n\n                return\n            }\n        }\n\n        // console.warn(\"still ok\")\n        typedObject.id = traceObject.id\n        typedObject.name = traceObject.name\n        typedObject.cached = traceObject.cached\n        typedObject.error = traceObject.error\n        typedObject.digest = traceObject.digest\n        typedObject.completed = traceObject.completed\n        typedObject.started = traceObject.started\n        typedObject.runtime = traceObject.runtime\n        typedObject.status = traceObject.status\n        typedObject.stdout = traceObject.stdout\n        typedObject.stderr = traceObject.stderr\n        typedObject.buildParents = traceObject.buildParents\n\n        buildPipeline.actionsObject[digest] = typedObject\n    })\n\n    const filesets : FilesetAction[] = []\n    const actions : Action[] = []\n\n    Object.values(buildPipeline.actionsObject)\n        .sort((a, b) => a.started - b.started) // sort values chronologically, based on start time\n        .forEach((item) => {\n            if (item.type === 'fileset') {\n                filesets.push(item as FilesetAction)\n            } else {\n                let parents : ParentAction[]\n\n                if (item.buildParents) {\n                    parents = item.buildParents\n                        .filter((digest) => buildPipeline.actionsObject[digest])\n                        .sort((a, b) => buildPipeline.actionsObject[a].started - buildPipeline.actionsObject[b].started) // sort values chronologically, based on start time\n                        .map((digest) : ParentAction => ({\n                            digest,\n                            name: buildPipeline.actionsObject[digest].name,\n                        }))\n                }\n\n                delete item.buildParents\n\n                actions.push(<Action>{\n                    ...item,\n                    parents,\n                })\n            }\n        })\n\n    delete buildPipeline.actionsObject\n\n    return {\n        ...buildPipeline,\n        filesets,\n        actions,\n    }\n}\n\n\nasync function run(protoPath: string, tracePath: string, meta: string, destination: string) {\n    // Retrieve the protobuf definition and the trace file from wherever they are (XHR, file)\n    // Here, just lazily readfilesync them\n    let buff = readFileSync(protoPath)\n    let trace = readFileSync(tracePath)\n\n    // Get the pipeline and the tasks from Pantry\n    let pipeline = await Pantry(buff, trace, meta)\n\n    writeFileSync(destination, JSON.stringify(pipeline, null, 2))\n    // console.warn(JSON.stringify(pipeline, null, 2))\n}\n\nrun(\n    process.argv[2],\n    process.argv[3],\n    process.argv[4],\n    process.argv[5]\n)\n"]}