{"version":3,"file":"model.js","sourceRoot":"/","sources":["lib/model.ts"],"names":[],"mappings":"AAGA,OAAQ,KAAK,EAAE,MAAM,SAAS,CAAC;AAK/B,YAAY;AACZ,cAAc,gBAAgB,CAAC;AAC/B,cAAc,iBAAiB,CAAC;AAoChC;;;GAGG;AACH,MAAM,OAAO,IAAI;IAShB,YAAY,EAAU,EAAE,IAA6B;QAKrD,sBAAsB;QACtB,YAAO,GAAyC,OAAO,CAAC,QAAQ,CAAC;QAEjE,WAAM,GAiBF;YACH,IAAI,EAAgB,EAAE,CAAC,IAAI,EAAE;YAC7B,IAAI,EAAgB,EAAE,CAAC,IAAI,EAAE;YAC7B,UAAU,EAAU,EAAE,CAAC,UAAU,EAAE;YACnC,OAAO,EAAa,EAAE,CAAC,OAAO,EAAE;YAChC,IAAI,EAAgB,EAAE,CAAC,OAAO,EAAE;YAChC,QAAQ,EAAY,EAAE,CAAC,QAAQ,EAAE;YACjC,OAAO,EAAa,EAAE,CAAC,OAAO,EAAE;YAChC,iBAAiB,EAAG,EAAE,CAAC,iBAAiB,EAAE;YAC1C,QAAQ,EAAY,EAAE,CAAC,QAAQ,EAAE;YACjC,OAAO,EAAa,EAAE,CAAC,OAAO,EAAE;YAChC,MAAM,EAAc,EAAE,CAAC,MAAM,EAAE;YAC/B,QAAQ,EAAY,EAAE,CAAC,QAAQ,EAAE;YACjC,IAAI,EAAgB,EAAE,CAAC,IAAI,EAAE;YAC7B,MAAM,EAAc,EAAE,CAAC,MAAM,EAAE;YAC/B,QAAQ,EAAY,EAAE,CAAC,QAAQ,EAAE;YACjC,OAAO,EAAa,EAAE,CAAC,OAAO,EAAE;SAChC,CAAC;QAEF,UAAK,GAAe;YACnB,EAAE,EAAK,UAAU;YACjB,IAAI,EAAG,eAAe;SACtB,CAAC;QA9CD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACtB,CAAC;CA6CD;AAgPD,MAAM,CAAN,IAAY,WAMX;AAND,WAAY,WAAW;IACtB,0BAAW,CAAA;IACX,4BAAa,CAAA;IACb,+BAAgB,CAAA;IAChB,8BAAe,CAAA;IACf,kCAAmB,CAAA;AACpB,CAAC,EANW,WAAW,GAAX,WAAW,KAAX,WAAW,QAMtB","sourcesContent":["import {bool, int, uint64} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport {digest} from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport  * as os from \"node:os\";\n\nimport {RunStatus, ActionStatus} from \"./model/run.js\";\nimport {Stack, LogLine, AssembledLog, GroupedLogsPayload} from \"./model/logs.js\";\n\n// Re-export\nexport * from \"./model/run.js\";\nexport * from \"./model/logs.js\";\n\n/**\n * IMPORTANT NOTES\n *\n * 1. Timing information are subject to caution:\n * - a certain task may take a largely different amount of time if ran in parallel with tasks that may or may not be cached\n * - a certain task ran on different machines will take vastly different time\n * Clearly we do need node-information per-task:\n * - number of core\n * - cputype\n * - memory\n * - load\n * And we also need parallelisism info, or at the very least, a way to correct the \"weight\" a task based on plan timing info\n *\n * 2. Tasks currently do not have a satisfying identifier information:\n * - \"name\" is purely at the discretion of the user, and can very well be used by different tasks\n * - \"digest\" reflects the task content - as such it will change with even minor changes to the task itself\n * - ideally, we would have a unique identifier mechanism that does not change with task changing but that is also unique\n * across an organization\n *\n * 3. We currently miss any form of:\n * - user information - \"who\" triggered the build?\n * - we do not have information about the context - which Github repository, which commit, where does the plan come from\n */\n\n/*\n * A User represents a GitHub account\n */\nexport type User = {\n\tid: string\n\tname: string\n\t// XXX signatures?\n\t// gpg: string\n}\n\n/*\n * A runner is a machine able to run CodeComet pipelines\n * Right now this is being initialized with details from the machine running this script\n */\nexport class Host {\n\t// A unique identifier\n\tid: string; //  = \"uuid1233445\"\n\n\t// free form labels\n\tmetadata?: {\n\t\t[key: string]: string\n\t};\n\n\tconstructor(id: string, meta: {[key: string]: string}){\n\t\tthis.id = id;\n\t\tthis.metadata = meta;\n\t}\n\n\t// runtime information\n\truntime?: {[key: string]: string | undefined} = process.versions;\n\n\tsystem?: {\n\t\tarch: string,\n\t\tcpus: any[],\n\t\tendianness: string,\n\t\tfreemem: int,\n\t\thome: string,\n\t\thostname: string,\n\t\tloadavg: number[],\n\t\tnetworkInterfaces: {[key: string]: any},\n\t\tplatform: string,\n\t\trelease: string,\n\t\ttmpdir: string,\n\t\ttotalmem: number,\n\t\ttype: string,\n\t\tuptime: number,\n\t\tuserInfo: {[key: string]: any},\n\t\tversion: string\n\t} = {\n\t\tarch              : os.arch(),\n\t\tcpus              : os.cpus(),\n\t\tendianness        : os.endianness(),\n\t\tfreemem           : os.freemem(),\n\t\thome              : os.homedir(),\n\t\thostname          : os.hostname(),\n\t\tloadavg           : os.loadavg(),\n\t\tnetworkInterfaces : os.networkInterfaces(),\n\t\tplatform          : os.platform(),\n\t\trelease           : os.release(),\n\t\ttmpdir            : os.tmpdir(),\n\t\ttotalmem          : os.totalmem(),\n\t\ttype              : os.type(),\n\t\tuptime            : os.uptime(),\n\t\tuserInfo          : os.userInfo(),\n\t\tversion           : os.version(),\n\t};\n\n\towner: User = <User>{\n\t\tid   : \"spacedub\",\n\t\tname : \"Space Raccoon\",\n\t};\n}\n\nexport type Repository = {\n\tcommit: string\n\tauthor: string\n\tparent: string\n\tisDirty: bool\n\tlocation: string\n\tcommitSubject: string\n}\n\n// usage: process.resourceUsage(),\n\n\n\nexport type ActionsInfo = {\n\t// total number of tasks\n\ttotal: int\n\n\t// how many were cached\n\tcached: int\n\n\t// how many ran successfully; aka started, not cached, not errored, finished\n\tran: int\n\n\t// how many finished successfully; aka started, not errored, finished; aka cached + ran\n\tfinishedSuccessfully: int\n\n\t// percent of how many of the total tasks finished successfully\n\tfinishedSuccessfullyPercent: int\n\n\t// percent of total tasks that were cached\n\tcachedPercent: int\n\n\t// how many errored\n\terrored: int\n\n\t// how many started but got interrupted; aka started, not cached, not errored, never finished\n\tinterrupted: int\n\n\t// how many did not run\n\tnotRan: int\n}\n\n/**\n * A Run represents a DAG of actions that are meant to be ran together in order\n * The object here will hold individual tasks, and also a pre-computed report\n */\ntype GeneralRun = {\n\t// Digest uuid of the run\n\tid: string\n\n\t// unique name for the run. will be the last commit message, plus an indication if the current repo is dirty\n\tname: string\n\n\t// The unique, never changing identifier of a pipeline - should be the git source and codecomet plan file\n\tpipelineId: string\n\n\t// User chosen short name for the pipeline. Example: \"My Pipeline for Netlify\"\n\tpipelineName: string\n\n\t// User defined description for the plan. Example: \"This pipeline is doing fancy and boo\"\n\tdescription: string\n\n\t// User defined free-form key value custom metadata\n\tmetadata?: {\n\t\t[key: string]: string\n\t}\n\n\t// This means: when did the first task start?\n\t// Starting time\n\tstarted: uint64 //string\n\t// time at which the last task that did complete actually finished\n\tcompleted: uint64 // string\n\t// See status type\n\tstatus: RunStatus\n\t// The total number of seconds between the first task starting and the last task finishing\n\truntime: int\n\t// actual CPU time\n\tmachineTime: int\n\n\t// Helpers providing high-level data about the tasks\n\tactionsInfo: ActionsInfo\n\n\t// Repository data\n\trepository?: Repository\n\n\t// Trigger: \"manual\" or pull request identifier\n\ttrigger: string\n\n\t// User or entity that triggered the run\n\tactor: User\n\n\t// Host executing the run\n\thost?: Host\n}\n\nexport interface BuildRun extends GeneralRun {\n\tactionsObject: BuildActionsObject\n}\n\nexport type BuildActionsObject = {\n\t[key: digest.Digest]: BuildAction\n}\n\nexport interface Run extends GeneralRun {\n\ttimingInfo: TimingInfo[]\n\tfilesets: FilesetAction[]\n\tactions: Action[]\n}\n\n\ntype GeneralAction = {\n\tid: string\n\tname: string\n\tdigest: digest.Digest\n\tstarted: uint64\n\tcompleted: uint64\n\truntime: int\n\tcached: bool\n\terror: string\n\tstatus: ActionStatus\n\tstack: Stack\n\tprogressGroup: Types.ProgressGroup\n\ttype: ActionType\n}\n\nexport interface BuildAction extends GeneralAction {\n\tbuildParents?: digest.Digest[]\n\tstdout: LogLine[]\n\tstderr: LogLine[]\n\tassembledLogs: AssembledLog[]\n}\n\nexport interface Action extends GeneralAction {\n\tparents?: ParentAction[]\n\tgroupedLogs?: GroupedLogsPayload\n}\n\nexport type ParentAction = {\n\tid: string\n\tname: string\n}\n\nexport type ActionType =\n\t| UtilityActionType\n\t| 'custom'\n\t| 'fileset'\n\ntype UtilityActionType =\n\t| 'utility'\n\t| 'merge'\n\t| 'copy'\n\t| 'makeDirectory'\n\t| 'addFile'\n\t| 'move'\n\t| 'createSymbolicLink'\n\t| 'patch'\n\nexport interface UserBuildAction extends BuildAction {\n\ttype: 'custom'\n}\n\nexport interface UserAction extends Action {\n\ttype: 'custom'\n}\n\ntype UtilityBaseAction = {\n\tutilityName : string\n}\n\nexport interface UtilityBuildAction extends BuildAction, UtilityBaseAction {\n\ttype: UtilityActionType\n}\n\nexport interface UtilityAction extends Action, UtilityBaseAction {\n\ttype: UtilityActionType\n}\n\nexport interface MakeDirectoryBuildAction extends UtilityBuildAction {\n\ttype: 'makeDirectory'\n\tutilityName: 'make directory'\n}\n\nexport interface MoveBuildAction extends UtilityBuildAction {\n\ttype: 'move'\n\tutilityName: 'move'\n}\n\nexport interface AddFileBuildAction extends UtilityBuildAction {\n\ttype: 'addFile'\n\tutilityName: 'add file'\n}\n\nexport interface PatchBuildAction extends UtilityBuildAction {\n\ttype: 'patch'\n\tutilityName: 'patch'\n}\n\nexport interface CreateSymbolicLinkBuildAction extends UtilityBuildAction {\n\ttype: 'createSymbolicLink'\n\tutilityName: 'create symbolic link'\n}\n\nexport interface MergeBuildAction extends UtilityBuildAction {\n\ttype: 'merge'\n\tutilityName: 'merge'\n}\n\nexport interface CopyBuildAction extends UtilityBuildAction {\n\ttype: 'copy'\n\tutilityName: 'copy'\n}\n\ntype FilesetBaseAction = {\n\tfilesetType: FilesetType\n\tsource: string\n\tlink?: string\n\t// ImageFileset\n\tforceResolve?: bool\n\tarchitecture?: string\n\tvariant?: string\n\t// GitFileset\n\tkeepDir?: bool\n\t// HTTPFileset\n\tchecksum?: string\n\tfilename?: string\n\t// LocalFileset\n\tincludePattern?: string[]\n\texcludePattern?: string[]\n}\n\nexport interface FilesetBuildAction extends BuildAction, FilesetBaseAction {\n\ttype: 'fileset'\n}\n\nexport interface FilesetAction extends Action, FilesetBaseAction {\n\ttype: 'fileset'\n}\n\nexport enum FilesetType {\n\tGit = 'git',\n\tHTTP = 'http',\n\tImage = 'docker',\n\tLocal = 'local',\n\tScratch = 'scratch',\n}\n\nexport type TimingInfo = {\n\tid: string\n\tname: string\n\truntime: number\n\tpercent: number\n\tcached?: true\n}\n"]}