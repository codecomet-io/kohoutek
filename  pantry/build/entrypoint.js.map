{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["entrypoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { createId } from 'briznads-helpers';\nimport { Tracer } from \"./dependencies/sentry.js\";\nimport { BuffIngester } from \"./lib/ingester.js\";\nimport {\n\tUtilityBuildAction,\n\tFilesetBuildAction,\n\tFilesetAction,\n\tFilesetType,\n\tAction,\n\tBuildAction,\n\tBuildActionsObject,\n\tParentAction,\n\tBuildRun,\n\tRun,\n\tUserBuildAction,\n\tTimingInfo,\n\tAssembledLog,\n\tGroupedLogsPayload,\n\tGroupedLogs,\n\tParsedLog,\n\tMakeDirectoryBuildAction,\n\tMoveBuildAction,\n\tAddFileBuildAction,\n\tPatchBuildAction,\n\tCreateSymbolicLinkBuildAction,\n\tMergeBuildAction,\n\tCopyBuildAction,\n} from \"./lib/model.js\";\nimport { error, nil } from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport { ReadFromIMPL } from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport { digest as CryptoDigest } from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport { Protobuf } from \"codecomet-js/source/utils/protobuf.js\";\nimport { Types } from \"codecomet-js/source/protobuf/types.js\";\nimport { readFileSync, writeFileSync } from \"fs\";\nimport { Firestore } from './lib/firestore.js';\n\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\");\n\n\ntype LowLevelBuilderOperation = {\n\toperation: Types.Op\n\tdigest: CryptoDigest.Digest\n\tmetadata: Types.OpMetadata\n}\n\n\nconst actionTypeMap = {\n\t'atomic.mv'      : 'move',\n\t'atomic.addfile' : 'addFile',\n\t'atomic.mkdir'   : 'makeDirectory',\n\t'atomic.patch'   : 'patch',\n\t'atomic.copy'    : 'copy',\n\t'atomic.symlink' : 'createSymbolicLink',\n\t'atomic.merge'   : 'merge',\n};\n\n\nfunction ingest(buffer: Buffer): [ LowLevelBuilderOperation[], error ] {\n\tconst [def, err] = ReadFromIMPL(buffer);\n\n\tif (err != nil) {\n\t\treturn [nil, err];\n\t}\n\n\tconst operations : LowLevelBuilderOperation[] = def.Def.map((dt) => {\n\t\tconst digest = CryptoDigest.FromBytes(dt);\n\n\t\treturn {\n\t\t\tdigest,\n\t\t\toperation : <Types.Op>Protobuf.read(\"Op\", dt),\n\t\t\tmetadata  : def.Metadata[digest],\n\t\t};\n\t});\n\n\treturn [ operations, nil ];\n}\n\nexport default async function Pantry(buffer: Buffer, trace: Buffer, meta: string): Promise<Run> {\n\tawait CodeComet.Bootstrap();\n\n\t// Spoof in metadata\n\tconst metadata = JSON.parse(meta);\n\n\t// Retrieve the data model from protobuf first, chain that into the ingester\n\t// Suck up the serialized protobuf, spit out semi-acceptable objects\n\tconst [ llbOperations, err ] = ingest(buffer);\n\n\tconst buildActionsObject: BuildActionsObject = {};\n\n\tconst filesetDockerImageUrlRegex : RegExp = /^docker-image:/;\n\n\tllbOperations.forEach((llbOperation) => {\n\t\tconst name : string = llbOperation.metadata.description?.['llb.customname'];\n\t\tconst actionTypeKey : string = llbOperation?.metadata?.description?.['codecomet.op'];\n\n\t\tif (\n\t\t\tllbOperation.metadata.caps['source.image']\n            || llbOperation.metadata.caps['source.git']\n            || llbOperation.metadata.caps['source.local']\n            || llbOperation.metadata.caps['source.http']\n\t\t) {\n\t\t\tlet fileset = <FilesetBuildAction>{\n\t\t\t\tname,\n\t\t\t\ttype        : 'fileset',\n\t\t\t\tfilesetType : FilesetType.Scratch,\n\t\t\t\tsource      : llbOperation.operation.source.identifier,\n\t\t\t};\n\n\t\t\tif (llbOperation.metadata.caps['source.image']) {\n\t\t\t\tfileset = {\n\t\t\t\t\t...fileset,\n\t\t\t\t\tfilesetType  : FilesetType.Image,\n\t\t\t\t\tforceResolve : llbOperation.operation.source.attrs['image.resolvemode'] === 'pull',\n\t\t\t\t\tarchitecture : llbOperation.operation.platform.Architecture,\n\t\t\t\t\tvariant      : llbOperation.operation.platform.Variant,\n\t\t\t\t};\n\n\t\t\t\tif (filesetDockerImageUrlRegex.test(fileset.source)) {\n\t\t\t\t\t// By default, just replace the scheme with https for any docker image\n\t\t\t\t\tlet link = fileset.source.replace(filesetDockerImageUrlRegex, 'https:');\n\n\t\t\t\t\tconst url = new URL(fileset.source);\n\n\t\t\t\t\t// If it is a Docker Hub image though, tranform it into http://hub.docker.com/r/OWNER/NAME\n\t\t\t\t\tif (/docker\\.io$/.test(url.hostname)) {\n\t\t\t\t\t\tlink = 'https://hub.docker.com/r' + url.pathname.replace(/:[^:]+$/, '');\n\t\t\t\t\t}\n\n\t\t\t\t\t// More special cases may be added in the future if need be (GHCR, ECR, etc)\n\t\t\t\t\tfileset.link = link;\n\t\t\t\t}\n\t\t\t} else if (llbOperation.metadata.caps['source.git']) {\n\t\t\t\tfileset = {\n\t\t\t\t\t...fileset,\n\t\t\t\t\tfilesetType : FilesetType.Git,\n\t\t\t\t\tkeepDir     : llbOperation.operation.source.attrs['git.keepgitdir'] === 'true',\n\t\t\t\t\tlink        : fileset.source.replace(/^git:/, 'https:'),\n\t\t\t\t};\n\t\t\t} else if (llbOperation.metadata.caps['source.local']) {\n\t\t\t\tfileset = {\n\t\t\t\t\t...fileset,\n\t\t\t\t\tfilesetType    : FilesetType.Local,\n\t\t\t\t\texcludePattern : JSON.parse(llbOperation.operation.source.attrs['local.excludepattern'] || '[]'),\n\t\t\t\t\tincludePattern : JSON.parse(llbOperation.operation.source.attrs['local.includepattern'] || '[]'),\n\t\t\t\t};\n\t\t\t} else if (llbOperation.metadata.caps['source.http']) {\n\t\t\t\tfileset = {\n\t\t\t\t\t...fileset,\n\t\t\t\t\tfilesetType : FilesetType.HTTP,\n\t\t\t\t\tchecksum    : llbOperation.operation.source.attrs['http.checksum'],\n\t\t\t\t\tfilename    : llbOperation.operation.source.attrs['http.filename'],\n\t\t\t\t\tlink        : fileset.source,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbuildActionsObject[llbOperation.digest] = fileset;\n\t\t} else if (actionTypeKey) {\n\t\t\tlet descriptor: UtilityBuildAction;\n\n\t\t\tswitch (actionTypeKey) {\n\t\t\t\tcase 'atomic.mkdir':\n\t\t\t\t\tdescriptor = <MakeDirectoryBuildAction>{\n\t\t\t\t\t\tutilityName : 'make directory',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.mv':\n\t\t\t\t\tdescriptor = <MoveBuildAction>{\n\t\t\t\t\t\tutilityName : 'move',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.addfile':\n\t\t\t\t\tdescriptor = <AddFileBuildAction>{\n\t\t\t\t\t\tutilityName : 'add file',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.patch':\n\t\t\t\t\tdescriptor = <PatchBuildAction>{\n\t\t\t\t\t\tutilityName : 'patch',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.symlink':\n\t\t\t\t\tdescriptor = <CreateSymbolicLinkBuildAction>{\n\t\t\t\t\t\tutilityName : 'create symbolic link',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.merge':\n\t\t\t\t\tdescriptor = <MergeBuildAction>{\n\t\t\t\t\t\tutilityName : 'merge',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'atomic.copy':\n\t\t\t\t\tdescriptor = <CopyBuildAction>{\n\t\t\t\t\t\tutilityName : 'copy',\n\t\t\t\t\t};\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn(`Unrecognized atomic action type|${ actionTypeKey }|`);\n\n\t\t\t\t\tdescriptor = <UtilityBuildAction>{};\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdescriptor.type = actionTypeMap[ actionTypeKey ] ?? 'utility';\n\t\t\tdescriptor.name = name;\n\n\t\t\tbuildActionsObject[llbOperation.digest] = descriptor;\n\t\t} else {\n\t\t\tbuildActionsObject[llbOperation.digest] = <UserBuildAction>{\n\t\t\t\ttype : 'custom',\n\t\t\t\tname : name ?? '',\n\t\t\t};\n\t\t}\n\t});\n\n\tconst buffIngester = new BuffIngester();\n\tconst buildRun : BuildRun = buffIngester.ingest(trace);\n\n\t// Suck up metadata - TODO @spacedub: reincorporate metadata into protobuf pipeline definitions instead of separate entity\n\tbuildRun.pipelineId = metadata.id;\n\tbuildRun.description = metadata.description;\n\tbuildRun.pipelineName = metadata.name;\n\tbuildRun.trigger = metadata.trigger;\n\tbuildRun.actor = metadata.actor;\n\tbuildRun.host = metadata.host;\n\tbuildRun.repository = metadata.repository;\n\n\tbuildRun.name = buildRun.repository.commitSubject;\n\n\tif (buildRun.repository.isDirty) {\n\t\tbuildRun.name = `[DIRTY] ${ buildRun.name }`;\n\t}\n\n\t// Geez this is shit. @spacedub burn all of this with fire and rewrite the stitching probably (later...)\n\t// briznad: @spacedub you're too hard on yourself\n\tfor (const [ digest, traceObject ] of Object.entries(buildRun.actionsObject)) {\n\t\tlet typedObject: BuildAction;\n\n\t\tif (buildActionsObject[digest]) {\n\t\t\ttypedObject = buildActionsObject[digest];\n\t\t} else {\n\t\t\t// This is not good. Bad shit here: https://github.com/moby/buildkit/issues/3693\n\t\t\t// So, try very-very hard to still retrieve the object, even with a different digest\n\t\t\tfor (const key of Object.keys(buildActionsObject)) {\n\t\t\t\tif (buildActionsObject[key]?.name === buildRun.actionsObject[digest]?.name) {\n\t\t\t\t\ttypedObject = buildActionsObject[key];\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!typedObject){\n\t\t\t\tconsole.warn(\"Unable to find proto object for vertex\", digest);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\ttypedObject.id = traceObject.id;\n\t\ttypedObject.name = traceObject.name;\n\t\ttypedObject.cached = traceObject.cached;\n\t\ttypedObject.error = traceObject.error;\n\t\ttypedObject.digest = traceObject.digest;\n\t\ttypedObject.completed = traceObject.completed;\n\t\ttypedObject.started = traceObject.started;\n\t\ttypedObject.runtime = traceObject.runtime;\n\t\ttypedObject.status = traceObject.status;\n\t\ttypedObject.buildParents = traceObject.buildParents;\n\t\ttypedObject.assembledLogs = traceObject.assembledLogs;\n\n\t\tbuildRun.actionsObject[digest] = typedObject;\n\t}\n\n\tconst actionsOrder : string[] = Object.keys(buildRun.actionsObject)\n\t\t.sort((a, b) => // sort values chronologically, based on start time\n\t\t\tbuildRun.actionsObject[a]?.started - buildRun.actionsObject[b]?.started,\n\t\t);\n\n\t// after initial chronological sort, run an additional check to insure no parent action comes after a child\n\toutermostLoop: while (true) {\n\t\tfor (const key of actionsOrder) {\n\t\t\tconst parents = buildRun.actionsObject[key]?.buildParents;\n\n\t\t\tif (!(parents && parents.length)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst itemIndex = actionsOrder.indexOf(key);\n\n\t\t\tfor (const parent of parents) {\n\t\t\t\tconst parentIndex = actionsOrder.indexOf(parent);\n\n\t\t\t\tif (parentIndex > itemIndex) {\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t`item ${ key } appears before parent ${ parent }`,\n\t\t\t\t\t\t`\\ninserting item #${ itemIndex } after parent #${ parentIndex }`,\n\t\t\t\t\t\t'\\n',\n\t\t\t\t\t);\n\n\t\t\t\t\tactionsOrder.splice(parentIndex, 0, ...actionsOrder.splice(itemIndex, 1));\n\n\t\t\t\t\tcontinue outermostLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbreak;\n\t}\n\n\tconst timingInfo : TimingInfo[] = [];\n\tconst filesets : FilesetAction[] = [];\n\tconst actions : Action[] = [];\n\n\tfor (const key of actionsOrder) {\n\t\tconst item : any = buildRun.actionsObject[key];\n\n\t\tif (item.runtime != null) {\n\t\t\ttimingInfo.push(parseActionTiming(item));\n\t\t}\n\n\t\tif (item.assembledLogs && item.assembledLogs.length > 0) {\n\t\t\titem.groupedLogs = parseGroupedLogs(item.assembledLogs);\n\t\t}\n\n\t\tdelete item.assembledLogs;\n\n\t\tif (item.type === 'fileset') {\n\t\t\tfilesets.push(<FilesetAction>item);\n\t\t} else {\n\t\t\tlet parents : ParentAction[] = [];\n\n\t\t\tif (item.buildParents) {\n\t\t\t\tfor (const digest of item.buildParents) {\n\t\t\t\t\tif (!buildRun.actionsObject[digest]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// insert the entry into the parents list at the same index as the parent in the overall list\n\t\t\t\t\t// this insures the correct order\n\t\t\t\t\tparents[actionsOrder.indexOf(digest)] = {\n\t\t\t\t\t\tid   : buildRun.actionsObject[digest].id,\n\t\t\t\t\t\tname : buildRun.actionsObject[digest].name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// eliminate empty entries that may have resulted from inserting arbitrary index values\n\t\t\tparents = parents.filter((item) => item);\n\n\t\t\tif (!parents.length) {\n\t\t\t\tparents = null;\n\t\t\t}\n\n\t\t\tdelete item.buildParents;\n\n\t\t\tactions.push(<Action>{\n\t\t\t\t...item,\n\t\t\t\tparents,\n\t\t\t});\n\t\t}\n\t}\n\n\tdelete buildRun.actionsObject;\n\n\tconst summedTimingRuntime : number = timingInfo.reduce(\n\t\t(sum, item) => sum + item.runtime,\n\t\t0,\n\t);\n\n\tfor (const item of timingInfo) {\n\t\t// calculate percent of total runtime, rounded to 2 decimal places\n\t\titem.percent = Math.round(item.runtime / summedTimingRuntime * 100 * 100) / 100;\n\t}\n\n\treturn {\n\t\t...buildRun,\n\t\ttimingInfo,\n\t\tfilesets,\n\t\tactions,\n\t};\n}\n\nfunction parseActionTiming(item : any) : TimingInfo {\n\tconst { id, runtime } = item;\n\n\tconst name : string = item.type === 'fileset'\n\t\t? `${ (item as unknown as FilesetAction).filesetType } fileset: ${ item.name }`\n\t\t: `action: ${ item.name }`;\n\n\tconst timingInfo : TimingInfo = {\n\t\tid,\n\t\tname,\n\t\truntime,\n\t\tpercent : 0,\n\t};\n\n\tif (item.status === 'cached') {\n\t\ttimingInfo.cached = true;\n\t}\n\n\treturn timingInfo;\n}\n\nfunction parseGroupedLogs(assembledLogs : AssembledLog[]) : GroupedLogsPayload {\n\tconst splitLines = (multiLineStr : string) : string[] => multiLineStr.split(/\\r|\\n/);\n\n\tconst commands : GroupedLogs[] = [];\n\n\tlet lastCommand : string;\n\n\tfor (const assembledLog of assembledLogs) {\n\t\tconst { command, resolved, exitCode } = assembledLog;\n\n\t\tconst logs : ParsedLog[] = [];\n\n\t\tif (assembledLog.stdout) {\n\t\t\tlogs.push({\n\t\t\t\ttimestamp : assembledLog.timestamp,\n\t\t\t\tlines     : splitLines(assembledLog.stdout),\n\t\t\t});\n\t\t}\n\n\t\tif (assembledLog.stderr) {\n\t\t\tlogs.push({\n\t\t\t\ttimestamp : assembledLog.timestamp,\n\t\t\t\tlines     : splitLines(assembledLog.stderr),\n\t\t\t\tisStderr  : true,\n\t\t\t});\n\t\t}\n\n\t\tif (command === lastCommand) {\n\t\t\tconst item = commands[commands.length - 1];\n\n\t\t\titem.exitCode = exitCode;\n\n\t\t\titem.logs.push(...logs);\n\t\t} else {\n\t\t\tcommands.push({\n\t\t\t\tcommand,\n\t\t\t\tresolved,\n\t\t\t\texitCode,\n\t\t\t\tlogs,\n\t\t\t\tid : createId('html_id'),\n\t\t\t});\n\t\t}\n\n\t\tlastCommand = command;\n\t}\n\n\tlet totalLines : number = 0;\n\n\t// calculate total lines\n\tfor (const groupedLog of commands) {\n\t\ttotalLines += groupedLog.logs\n\t\t\t.reduce((sum, log) => sum + log.lines.length, 0);\n\t}\n\n\treturn {\n\t\tcommands,\n\t\ttotalLines,\n\t};\n}\n\n\nasync function run(protoPath: string, tracePath: string, meta: string, destination: string) {\n\t// Retrieve the protobuf definition and the trace file from wherever they are (XHR, file)\n\t// Here, just lazily readfilesync them\n\tconst buff = readFileSync(protoPath);\n\tconst trace = readFileSync(tracePath);\n\n\t// Get the run from Pantry\n\tconst run = await Pantry(buff, trace, meta);\n\n\tif (run == null) {\n\t\tconsole.error(`\\nERROR: run \"${ destination.replace(/^.+\\//, '') }\" could not be retrieved and/or generated\\n`);\n\n\t\treturn;\n\t}\n\n\twriteFileSync(destination, JSON.stringify(run, null, 2));\n\n\t// save run to db\n\tconst firestore = new Firestore();\n\n\tawait firestore.saveRun(run);\n}\n\nrun(\n\tprocess.argv[2],\n\tprocess.argv[3],\n\tprocess.argv[4],\n\tprocess.argv[5],\n);\n"]}