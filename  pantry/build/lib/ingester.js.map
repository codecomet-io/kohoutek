{"version":3,"file":"ingester.js","sourceRoot":"/","sources":["lib/ingester.ts"],"names":[],"mappings":"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","sourcesContent":["import { createId } from 'briznads-helpers';\nimport {bool, int, uint64} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport {digest} from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {\n\tSolveStatus,\n\tVertex,\n\tVertexLog,\n} from \"codecomet-js/source/buildkit-port/client/graph.js\";\nimport * as model from \"./model.js\";\nimport {ActionStatus, BuildActionsObject, BuildRun, ActionsInfo, Stack, User, Repository} from \"./model.js\";\nimport * as readline from 'node:readline/promises';\nimport {ReadStream} from \"tty\";\n\nimport * as Sentry from \"@sentry/node\";\nimport \"@sentry/tracing\";\n\n\nclass Build implements BuildRun {\n\tid = \"abcd1234\";\n\tname = \"user-defined name for this run\";\n\tpipelineId = \"unique-pipeline-identifier\";\n\tpipelineName = \"user-defined name for the pipeline\";\n\tdescription = \"This is our super test plan, and guess what this description can change at any time\";\n\tstarted = 0;\n\tcompleted = 0;\n\tstatus = model.RunStatus.Completed;\n\truntime = 0;\n\tmachineTime = 0;\n\ttrigger = \"manual\";\n\tactionsObject: BuildActionsObject = {};\n\tactionsInfo: ActionsInfo = {\n\t\ttotal                       : 0,\n\t\tcached                      : 0,\n\t\tran                         : 0,\n\t\terrored                     : 0,\n\t\tinterrupted                 : 0,\n\t\tnotRan                      : 0,\n\t\tfinishedSuccessfully        : 0,\n\t\tfinishedSuccessfullyPercent : 0,\n\t\tcachedPercent               : 0,\n\t};\n\tactor: User = {\n\t\tid   : \"spacedub\",\n\t\tname : \"Space Raccoon\",\n\t};\n\n\taddLog(log: VertexLog) {\n\t\t// Retrieve log data from buildkit\n\t\tif (this.actionsObject[log.Vertex] == null) {\n\t\t\tthrow new Error(\"Logs without a registered vertex - panic\");\n\t\t}\n\n\t\tif (this.actionsObject[log.Vertex].stdout == undefined) {\n\t\t\tthis.actionsObject[log.Vertex].stdout = [];\n\t\t}\n\n\t\tif (this.actionsObject[log.Vertex].stderr == undefined) {\n\t\t\tthis.actionsObject[log.Vertex].stderr = [];\n\t\t}\n\n\t\tlet dt = Buffer.from(log.Data.toString(), \"base64\").toString(\"utf-8\").trim();\n\n\t\t// Ignore our ... display\n\t\tif (dt == \".\"){\n\t\t\tdt = \"\";\n\t\t}\n\n\t\t// Structured stack traces are transmitted in a data url form\n\t\tif (dt.startsWith(\"data:application/json;base64,\")) {\n\t\t\t// Decode it, parse it\n\t\t\tconst structured = JSON.parse(Buffer.from(dt.substring(dt.indexOf(\",\") + 1), \"base64\").toString(\"utf-8\"));\n\t\t\t// Copy that over into a Structured type\n\t\t\tthis.actionsObject[log.Vertex].stack = {\n\t\t\t\ttimestamp  : Date.parse(log.Timestamp),\n\t\t\t\tlineNumber : parseInt(structured.linenumber, 10) - 1,\n\t\t\t\texitCode   : parseInt(structured.exitcode, 10),\n\t\t\t\tcommand    : structured.command,\n\t\t\t\t// Source is double encoded, so, decode it, and split by line to facilitate accessing source[linenumber]\n\t\t\t\tsource     : Buffer.from(structured.source, \"base64\").toString(\"utf-8\").split(\"\\n\"),\n\t\t\t};\n\t\t} else if (log.Stream == 2){\n\t\t\tthis.actionsObject[log.Vertex].stderr.push({\n\t\t\t\ttimestamp : Date.parse(log.Timestamp),\n\t\t\t\tline      : dt,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.actionsObject[log.Vertex].stdout.push({\n\t\t\t\ttimestamp : Date.parse(log.Timestamp),\n\t\t\t\tline      : dt,\n\t\t\t});\n\t\t}\n\t}\n\n\taddVertex(vertice: Vertex){\n\t\tif (!vertice.Digest) {\n\t\t\tthrow new Error(\"Missing digest\" + vertice);\n\t\t}\n\n\t\tif (!vertice.Name) {\n\t\t\tthrow new Error(\"Missing name\" + vertice);\n\t\t}\n\n\t\t// Some actions are hidden away - either CodeComet internal shenanigans, or actions authors who want to hide their own internal dance\n\t\tif (vertice.ProgressGroup && vertice.ProgressGroup.weak == true) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Currently, BK leaks internal operations. The right solution is to finish replacing the default client with our own. Short term, very dirty hack by ignoring anything that starts with \"[auth] \"\n\t\tif (vertice.Name.startsWith(\"[auth] \")){\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.actionsObject[vertice.Digest]) {\n\t\t\tconst action = <model.BuildAction>{\n\t\t\t\tid     : createId('html_id'),\n\t\t\t\tname   : vertice.Name,\n\t\t\t\tdigest : vertice.Digest,\n\t\t\t\tcached : false,\n\t\t\t\tstatus : ActionStatus.Ignored,\n\t\t\t};\n\n\t\t\tif (vertice.Inputs) {\n\t\t\t\taction.buildParents = vertice.Inputs;\n\t\t\t}\n\n\t\t\tthis.actionsObject[vertice.Digest] = action;\n\t\t}\n\n\t\tif (vertice.Started){\n\t\t\tthis.actionsObject[vertice.Digest].started = Date.parse(vertice.Started);\n\t\t\t// this.actionsObject[vertice.Digest].datestamp = new Date(Date.parse(vertice.Started)).toISOString()\n\t\t\tif (!this.started || this.actionsObject[vertice.Digest].started < this.started) {\n\t\t\t\tthis.started = this.actionsObject[vertice.Digest].started;\n\t\t\t\t// this.datestamp = new Date(this.timestamp).toISOString()\n\t\t\t\t// Temporary hack to create unique Descriptions for each Report - obviously needs to be undone\n\t\t\t\tthis.description = \"Some Run\"; //  + this.Report.Started.toString().slice(-4)\n\t\t\t}\n\t\t\tthis.actionsObject[vertice.Digest].status = ActionStatus.Started;\n\t\t}\n\t\tif (vertice.Completed){\n\t\t\tthis.actionsObject[vertice.Digest].completed = Date.parse(vertice.Completed);\n\t\t\tthis.actionsObject[vertice.Digest].runtime = this.actionsObject[vertice.Digest].completed - this.actionsObject[vertice.Digest].started;\n\t\t\tthis.actionsObject[vertice.Digest].status = ActionStatus.Completed;\n\t\t}\n\t\tif (vertice.Error){\n\t\t\tthis.actionsObject[vertice.Digest].error = vertice.Error;\n\t\t\tthis.actionsObject[vertice.Digest].status = ActionStatus.Errored;\n\t\t\tif (vertice.Error.match(/did not complete successfully: exit code: 137: context canceled: context canceled$/))\n\t\t\t\tthis.actionsObject[vertice.Digest].status = ActionStatus.Cancelled;\n\t\t}\n\t\tif (vertice.Cached) {\n\t\t\tthis.actionsObject[vertice.Digest].cached = true;\n\t\t\tthis.actionsObject[vertice.Digest].status = ActionStatus.Cached;\n\t\t}\n\t}\n\n\twrap() {\n\t\tconst actionKeys = Object.keys(this.actionsObject);\n\n\t\tthis.actionsInfo = this.parseActionsInfo(actionKeys, this.actionsObject);\n\n\t\t// if any action errored, the run errored\n\t\tif (actionKeys.some((key) => this.actionsObject[key].error)) {\n\t\t\tthis.status = model.RunStatus.Errored;\n\t\t} else if (!actionKeys.some((key) => this.actionsObject[key].completed)) { // if any action didn't complete, and we have NOT errored, it means we got cancelled\n\t\t\tthis.status = model.RunStatus.Cancelled;\n\t\t}\n\n\t\tactionKeys.forEach((key) => {\n\t\t\t// If there is a more recent finish time, use it\n\t\t\tif (!this.completed || this.actionsObject[key].completed > this.completed) {\n\t\t\t\tthis.completed = this.actionsObject[key].completed;\n\t\t\t}\n\t\t});\n\n\t\tlet mt: int = 0;\n\n\t\tactionKeys\n\t\t\t.filter((key) => this.actionsObject[key].started && this.actionsObject[key].completed)\n\t\t\t.forEach((key) => mt += this.actionsObject[key].completed - this.actionsObject[key].started);\n\n\t\tthis.machineTime = mt;\n\t\tthis.runtime = this.completed - this.started;\n\n\t\tthis.id = createId('lowercase', 8);\n\t}\n\n\tparseActionsInfo(actionKeys : string[], actionsObject : model.BuildActionsObject) : model.ActionsInfo {\n\t\t// Total is easy\n\t\tconst total = actionKeys.length;\n\n\t\t// Cached is easy\n\t\tconst cached = actionKeys\n\t\t\t.filter((key) => actionsObject[key].cached)\n\t\t\t.length;\n\n\t\t// Errored is easy\n\t\tconst errored = actionKeys\n\t\t\t.filter((key) => actionsObject[key].error)\n\t\t\t.length;\n\n\t\t// Not ran have not started\n\t\tconst notRan = actionKeys\n\t\t\t.filter((key) => !actionsObject[key].started)\n\t\t\t.length;\n\n\t\t// Ran have started, not cached, not errored, finished\n\t\tconst ran = actionKeys\n\t\t\t.filter((key) =>\n\t\t\t\tactionsObject[key].started\n                && !actionsObject[key].cached\n                && !actionsObject[key].error\n                && actionsObject[key].completed,\n\t\t\t)\n\t\t\t.length;\n\n\t\t// finished successfully have started, not errored, finished; aka cached + ran\n\t\tconst finishedSuccessfully = cached + ran;\n\n\t\t// percent of how many of the total tasks finished successfully\n\t\tconst finishedSuccessfullyPercent = Math.round((finishedSuccessfully / total) * 100);\n\n\t\t// percent of total tasks that were cached\n\t\tconst cachedPercent = Math.round((cached / total) * 100);\n\n\t\t// Interrupted has started, not cached, not errored, never finished\n\t\tconst interrupted = actionKeys\n\t\t\t.filter((key) =>\n\t\t\t\tactionsObject[key].started\n                && !actionsObject[key].cached\n                && !actionsObject[key].error\n                && !actionsObject[key].completed,\n\t\t\t)\n\t\t\t.length;\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\tcached,\n\t\t\terrored,\n\t\t\tnotRan,\n\t\t\tran,\n\t\t\tfinishedSuccessfully,\n\t\t\tfinishedSuccessfullyPercent,\n\t\t\tcachedPercent,\n\t\t\tinterrupted,\n\t\t};\n\t}\n}\n\n\n// Purpose of this is to suck out the info out of console colored output\n// Hang-on to your butt\nfunction parseLogEntry(line) {\n\tlet prior = 0;\n\tconst original = line.line;\n\tlet hasCommand = false;\n\tlet hasOutput = false;\n\tlet command = \"\";\n\tlet output = \"\";\n\n\t// Match colored console break points\n\tline.line.replace(/\\x1B\\x5B[a-z0-9]{3}/g, (match, index, subject) : string => {\n\t\t// If first match, or empty slice, move on\n\t\tif (prior != 0 && (index-prior) != 0){\n\t\t\t// Get the string then, after a bit of cleanup\n\t\t\tlet sub = subject.substring(prior, index).trim(); // .trimLeft(\"▶\").trim()\n\t\t\tif (sub.charAt(0) == \"▶\")\n\t\t\t\tsub = sub.substring(1).trim();\n\t\t\t// Anything in there?\n\t\t\tif (sub != \"\"){\n\t\t\t\t// If we saw a command prompt, then it is a command\n\t\t\t\tif (hasCommand){\n\t\t\t\t\tcommand = sub;\n\t\t\t\t\thasCommand = false;\n\t\t\t\t}\n\t\t\t\t// If we saw an output prompt, then it is output (possibly multi line)\n\t\t\t\tif (hasOutput){\n\t\t\t\t\toutput += subject.substring(prior, index); // sub\n\t\t\t\t\t// splices.push(\"out\", output)\n\t\t\t\t\t// hasOutput = false\n\t\t\t\t}\n\t\t\t\t// Have a command prompt, mark it\n\t\t\t\tif (sub.trim() == \"command\"){\n\t\t\t\t\thasCommand = true;\n\t\t\t\t}\n\t\t\t\t// Have an output prompt, mark it\n\t\t\t\tif (sub.trim() == \"output\"){\n\t\t\t\t\thasOutput = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Seek\n\t\tprior = index + match.length;\n\n\t\t// Whatever\n\t\treturn \"\";\n\t});\n\n\t// Get the tail part and consolidate the output\n\tconst tail = original.substring(prior).trim();\n\n\tlet plain = \"\";\n\n\tif (hasOutput) {\n\t\toutput += original.substring(prior).trim();\n\t}\n\n\tif (!original.match(/^\\x1B\\x5B[a-z0-9]{3}$/)){\n\t\tif (!command)\n\t\t\tplain = original;\n\t}\n\n\treturn {\n\t\ttimestamp : line.timestamp,\n\t\tcommand   : command,\n\t\toutput    : output,\n\t\tplain     : plain,\n\t};\n}\n\nexport class BuffIngester {\n\tprivate build: Build;\n\n\tconstructor() {\n\t\tthis.build = new Build();\n\t}\n\n\tingest(buff: Buffer) : BuildRun {\n\t\tconst transaction = Sentry.startTransaction({\n\t\t\top   : \"Ingester\",\n\t\t\tname : \"Data ingesting transaction\",\n\t\t});\n\n\t\tbuff.toString().split('\\n').forEach((data) => {\n\t\t\t// resist badly formatted lines\n\t\t\tif (data.trim() == '') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet solveStatus : SolveStatus;\n\n\t\t\ttry {\n\t\t\t\tsolveStatus = <SolveStatus>JSON.parse(data);\n\n\t\t\t\tif (solveStatus.Vertexes) {\n\t\t\t\t\tsolveStatus.Vertexes.forEach(this.build.addVertex.bind(this.build));\n\t\t\t\t}\n\n\t\t\t\tif (solveStatus.Logs) {\n\t\t\t\t\tsolveStatus.Logs.forEach(this.build.addLog.bind(this.build));\n\t\t\t\t}\n\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\"Failed parsing status\", data);\n\n\t\t\t\tSentry.captureException(e, {\n\t\t\t\t\textra : {\n\t\t\t\t\t\tdata : data,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t/*\n        Object.values(this.build.actionsObject).forEach(function(action){\n            console.warn(action.stdout)\n            console.warn(action.stderr)\n        })\n\n         */\n\n\t\tconst sortByTimestamp = (a, b) => a.timestamp - b.timestamp;\n\n\t\t// Sort the logs and process them into something manageable\n\t\t// let logs = {}\n\t\tObject.values(this.build.actionsObject).forEach(function(action){\n\t\t\t// Sort stdout\n\t\t\tif (action.stdout) {\n\t\t\t\taction.stdout.sort(sortByTimestamp);\n\t\t\t}\n\n\t\t\t// Sort stderr\n\t\t\tif (action.stderr) {\n\t\t\t\taction.stderr.sort(sortByTimestamp);\n\t\t\t}\n\n\t\t\t// If we have anything in there\n\t\t\tif (action.stdout) {\n\t\t\t\t// Final form\n\t\t\t\tconst assembledLogs: model.AssembledLog[] = [];\n\t\t\t\t// Look into stderr\n\t\t\t\taction.stderr.forEach(function (line) {\n\t\t\t\t\t// If we have a stack trace, just get anything BEFORE\n\t\t\t\t\tif (!action.stack || action.stack.timestamp > line.timestamp){\n\t\t\t\t\t\t// Get the processed form of stderr\n\t\t\t\t\t\tconst parsedLog = parseLogEntry(line);\n\t\t\t\t\t\t// timestamps are not reliable - stdout may be off by a millisecond\n\n\t\t\t\t\t\tconst enrichedStderrSplitByNewline = parsedLog.output.split(\"\\n\");\n\t\t\t\t\t\tconst resolved = enrichedStderrSplitByNewline.shift();\n\t\t\t\t\t\tconst remainingStderrLines = enrichedStderrSplitByNewline.join(\"\\n\");\n\n\t\t\t\t\t\tlet stdout;\n\n\t\t\t\t\t\tif (remainingStderrLines === \"\"){\n\t\t\t\t\t\t\tstdout = action.stdout.shift();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Stuff it into our AssembledLog entry\n\t\t\t\t\t\tif (!parsedLog.plain || assembledLogs.length === 0 ) {\n\t\t\t\t\t\t\tassembledLogs.push({\n\t\t\t\t\t\t\t\tresolved,\n\t\t\t\t\t\t\t\tcommand   : parsedLog.command,\n\t\t\t\t\t\t\t\ttimestamp : parsedLog.timestamp,\n\t\t\t\t\t\t\t\tstdout    : stdout?.line,\n\t\t\t\t\t\t\t\tstderr    : remainingStderrLines,\n\t\t\t\t\t\t\t\texitCode  : 0,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (parsedLog.plain != \".\") {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tassembledLogs[assembledLogs.length - 1 ].stderr = parsedLog.plain;\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.warn(\"WTF\", parsedLog, assembledLogs.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\taction.assembledLogs = assembledLogs;\n\t\t\t}\n\n\t\t\tif (action.stack) {\n\t\t\t\taction.assembledLogs[action.assembledLogs.length - 1].exitCode = action.stack.exitCode;\n\t\t\t}\n\t\t});\n\n\t\t// post-processing and sending to callback\n\t\tthis.build.wrap();\n\n\t\t// Sentry transaction done\n\t\ttransaction.finish();\n\n\t\treturn this.build;\n\t}\n}\n"]}