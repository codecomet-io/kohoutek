{"version":3,"file":"entrypoint.js","sourceRoot":"/","sources":["entrypoint.ts"],"names":[],"mappings":"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","sourcesContent":["import {Tracer} from \"./dependencies/ts-core/sentry.js\"\nimport { BuffIngester } from \"./lib/ingester.js\";\nimport {\n    AddFileAction,\n    UtilityAction,\n    Fileset,\n    FilesetType,\n    Action,\n    ActionsObject,\n    GitFileset,\n    HTTPFileset,\n    ImageFileset,\n    LocalFileset,\n    MergeAction,\n    PrepareFilesetAction,\n    MakeDirectoryAction,\n    MoveAction,\n    PatchAction,\n    BuildPipeline,\n    Pipeline,\n    CreateSymbolicLinkAction,\n    UserAction\n} from \"./lib/model.js\";\nimport {stdin} from \"node:process\";\nimport {bool, error, nil} from \"codecomet-js/source/buildkit-port/dependencies/golang/mock.js\";\nimport CodeComet from \"codecomet-js/index.js\";\nimport {ReadFromIMPL} from \"codecomet-js/source/buildkit-port/client/llb/marshal.js\";\nimport {Protobuf} from \"codecomet-js/source/utils/protobuf.js\";\nimport { digest as CryptoDigest } from \"codecomet-js/source/buildkit-port/dependencies/opencontainers/go-digest.js\";\nimport {Types} from \"codecomet-js/source/protobuf/types.js\";\nimport {readFileSync, writeFileSync} from \"fs\";\nimport {description} from \"codecomet-js/experimental/protoc/github.com/gogo/protobuf/gogoproto/gogo_pb.js\";\n\n// Init Sentry\nnew Tracer(\"https://c02314800c4d4be2a32f1d28c4220f3f@o1370052.ingest.sentry.io/6673370\")\n\n\ntype Meta = {\n    id: string\n    description: string\n    commit: string // \"651a7ef66b7277f7c293dee8aec6e38305b03022\",\n    author: string // \"spacedub\",\n    parent: string // \"c2356d03e4bb824ef898808cf558fc75615beddb\",\n    dirty: bool // true,\n    location: string // \"github.com/codecomet-io/reporter-elastic\",\n}\n\ntype LowLevelBuilderOperation = {\n    operation: Types.Op\n    digest: CryptoDigest.Digest\n    metadata: Types.OpMetadata\n}\n\n\nconst actionTypeMap = {\n    'atomic.mv' : 'move',\n    'atomic.addfile' : 'addFile',\n    'atomic.mkdir' : 'makeDirectory',\n    'atomic.patch' : 'patch',\n    'atomic.symlink' : 'createSymbolicLink',\n    'atomic.merge' : 'merge',\n};\n\n\nfunction ingest(buffer: Buffer): [ LowLevelBuilderOperation[], error ] {\n    const [def, err] = ReadFromIMPL(buffer)\n\n    if (err != nil) {\n        return [nil, err]\n    }\n\n    const operations : LowLevelBuilderOperation[] = def.Def.map((dt) => {\n        const digest = CryptoDigest.FromBytes(dt)\n\n        return {\n            digest,\n            operation: <Types.Op>Protobuf.read(\"Op\", dt),\n            metadata: def.Metadata[digest],\n        }\n    })\n\n    return [ operations, nil ]\n}\n\nexport default async function Pantry(buffer: Buffer, trace: Buffer, meta: string): Promise<Pipeline> {\n    await CodeComet.Bootstrap()\n\n    // Spoof in metadata\n    const metadata = <Meta>JSON.parse(meta);\n\n    // Retrieve the data model from protobuf first, chain that into the ingester\n    // Suck up the serialized protobuf, spit out semi-acceptable objects\n    const [ llbOperations, err ] = ingest(buffer);\n\n    const filesets: Fileset[] = []\n    const protoActions: ActionsObject = {}\n\n    const filesetDockerImageUrlRegex : RegExp = /^docker-image:/\n\n    llbOperations.forEach((llbOperation) => {\n        const name : string = llbOperation.metadata.description?.['llb.customname']\n        const actionTypeKey : string = llbOperation?.metadata?.description?.['codecomet.op']\n\n        if (\n            llbOperation.metadata.caps['source.image']\n            || llbOperation.metadata.caps['source.git']\n            || llbOperation.metadata.caps['source.local']\n            || llbOperation.metadata.caps['source.http']\n        ) {\n            let type = FilesetType.Scratch\n\n            let fileset : Fileset = {\n                name,\n                type,\n                id: 'tempNonUniqueFilesetId',\n                source: llbOperation.operation.source.identifier,\n            }\n\n            if (llbOperation.metadata.caps['source.image']) {\n                type = FilesetType.Image\n\n                fileset = <ImageFileset>{\n                    ...fileset,\n                    type,\n                    forceResolve: llbOperation.operation.source.attrs['image.resolvemode'] === 'pull',\n                    architecture: llbOperation.operation.platform.Architecture,\n                    variant: llbOperation.operation.platform.Variant,\n                }\n\n                if (filesetDockerImageUrlRegex.test(fileset.source)) {\n                    fileset.link = fileset.source.replace(filesetDockerImageUrlRegex, 'https:')\n                }\n            } else if (llbOperation.metadata.caps['source.git']) {\n                type = FilesetType.Git\n\n                fileset = <GitFileset>{\n                    ...fileset,\n                    type,\n                    source: llbOperation.operation.source.identifier,\n                    keepDir: llbOperation.operation.source.attrs['git.keepgitdir'] === 'true',\n                    link: fileset.source.replace(/^git:/, 'https:'),\n                }\n            } else if (llbOperation.metadata.caps['source.local']) {\n                type = FilesetType.Local\n\n                fileset = <LocalFileset>{\n                    ...fileset,\n                    type,\n                    source: llbOperation.operation.source.identifier,\n                    excludePattern: JSON.parse(llbOperation.operation.source.attrs['local.excludepattern'] || '[]'),\n                    includePattern: JSON.parse(llbOperation.operation.source.attrs['local.includepattern'] || '[]'),\n                }\n            } else if (llbOperation.metadata.caps['source.http']) {\n                type = FilesetType.HTTP\n\n                fileset = <HTTPFileset>{\n                    ...fileset,\n                    type,\n                    source: llbOperation.operation.source.identifier,\n                    checksum: llbOperation.operation.source.attrs['http.checksum'],\n                    filename: llbOperation.operation.source.attrs['http.filename'],\n                    link: fileset.source,\n                }\n            }\n\n            filesets.push(fileset)\n\n            protoActions[llbOperation.digest] = <PrepareFilesetAction>{\n                name,\n                type: 'prepareFileset',\n                filesetType: type,\n            }\n        } else if (actionTypeKey) {\n            let descriptor: UtilityAction\n\n            switch (actionTypeKey) {\n                case 'atomic.mv':\n                    descriptor = <MoveAction>{}\n                    break\n                case 'atomic.addfile':\n                    descriptor = <AddFileAction>{}\n                    break\n                case 'atomic.mkdir':\n                    descriptor = <MakeDirectoryAction>{}\n                    break\n                case 'atomic.patch':\n                    descriptor = <PatchAction>{}\n                    break\n                case 'atomic.symlink':\n                    descriptor = <CreateSymbolicLinkAction>{}\n                    break\n                case 'atomic.merge':\n                    descriptor = <MergeAction>{}\n                    break\n                default:\n                    console.warn(`Unrecognized atomic action type|${actionTypeKey }|`)\n\n                    descriptor = <UtilityAction>{}\n                    break\n            }\n\n            descriptor.type = actionTypeMap[ actionTypeKey ] ?? 'utility'\n            descriptor.name = name\n\n            protoActions[llbOperation.digest] = descriptor\n        } else {\n            protoActions[llbOperation.digest] = <UserAction>{\n                type: 'custom',\n                name: name ?? '',\n            }\n        }\n    })\n\n    // throw \"lol\"\n    // Suck up stdin for the logs\n    // new StdinIngester(stdin, function(pl: BuildPipeline, tsks: ActionsObject){\n    const buffIngester = new BuffIngester()\n    const buildPipeline : BuildPipeline = buffIngester.ingest(trace)\n//        , function(pl: BuildPipeline, tsks: ActionsObject){\n    // XXX piggyback on metadata\n    buildPipeline.id = metadata.id\n    buildPipeline.description = metadata.description\n\n    // disable repository output for now\n    // it leaks info and isn't currently needed\n    // buildPipeline.repository.commit = metadata.commit\n    // buildPipeline.repository.author = metadata.author\n    // buildPipeline.repository.parent = metadata.parent\n    // buildPipeline.repository.dirty = metadata.dirty\n    // buildPipeline.repository.location = metadata.location\n\n    // Geez this is shit. @spacedub burn all of this with fire and rewrite the stitching probably (later...)\n    // briznad: @spacedub you're too hard on yourself\n    Object.keys(buildPipeline.actionsObject).forEach(function(digest){\n        const traceObject = buildPipeline.actionsObject[digest]\n\n        let typedObject: Action\n\n        if (!protoActions[digest]) {\n            // This is not good. Bad shit here: https://github.com/moby/buildkit/issues/3693\n            // So, try very-very hard to still retrieve the object, even with a different digest\n            // if (traceObject.name.startsWith(\"[source:local]\")){\n            Object.keys(protoActions).some(function(key){\n                // console.warn(\"Trying \", protoActions[key].name, \"vs\", pipeline.actionsObject[digest].name)\n                if (protoActions[key].name && protoActions[key].name == buildPipeline.actionsObject[digest].name){\n                    typedObject = protoActions[key]\n\n                    return true\n                }\n            })\n            //}\n            if (!typedObject){\n                console.warn(\"Unable to find proto object for vertex\", digest)\n\n                return\n            }\n        } else {\n            typedObject = protoActions[digest]\n        }\n\n        // console.warn(\"still ok\")\n        typedObject.id = traceObject.id\n        typedObject.name = traceObject.name\n        typedObject.cached = traceObject.cached\n        typedObject.error = traceObject.error\n        typedObject.digest = traceObject.digest\n        typedObject.completed = traceObject.completed\n        typedObject.started = traceObject.started\n        typedObject.runtime = traceObject.runtime\n        typedObject.status = traceObject.status\n        typedObject.stdout = traceObject.stdout\n        typedObject.stderr = traceObject.stderr\n        typedObject.parents = traceObject.parents\n\n        buildPipeline.actionsObject[digest] = typedObject\n    })\n\n    // extract actionObject values into an array\n    const actions = Object.values(buildPipeline.actionsObject)\n        .sort((a, b) => a.started - b.started) // sort values chronologically, based on start time\n\n    delete buildPipeline.actionsObject\n\n    return {\n        ...buildPipeline,\n        filesets,\n        actions,\n    };\n}\n\n\nasync function run(protoPath: string, tracePath: string, meta: string, destination: string) {\n    // Retrieve the protobuf definition and the trace file from wherever they are (XHR, file)\n    // Here, just lazily readfilesync them\n    let buff = readFileSync(protoPath)\n    let trace = readFileSync(tracePath)\n\n    // Get the pipeline and the tasks from Pantry\n    let pipeline = await Pantry(buff, trace, meta)\n\n    writeFileSync(destination, JSON.stringify(pipeline, null, 2))\n    // console.warn(JSON.stringify(pipeline, null, 2))\n}\n\nrun(\n    process.argv[2],\n    process.argv[3],\n    process.argv[4],\n    process.argv[5]\n)\n"]}